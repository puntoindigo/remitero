diff --git a/CONFIGURACION_ENTORNOS.md b/CONFIGURACION_ENTORNOS.md
index 7bca643..a2e6ad4 100644
--- a/CONFIGURACION_ENTORNOS.md
+++ b/CONFIGURACION_ENTORNOS.md
@@ -28,9 +28,17 @@ NEXTAUTH_URL="https://v0-remitero.vercel.app"
 NEXTAUTH_SECRET="secret-prod"
 ```
 
-### Variables de Entorno para Preview:
+### Variables de Entorno para Preview/Desarrollo:
 ```bash
-DATABASE_URL="postgresql://user:pass@dev-host:5432/remitero_dev"
+# URL directa de PostgreSQL
+dev_POSTGRES_URL="postgres://62d8691c0bca04a5fcb0a8ee92435e1de4d8ed608f10fb2a8ec597f4583e5cb1:sk_hxRVX8P69LXH27p3HUamd@db.prisma.io:5432/postgres?sslmode=require"
+
+# URL de Prisma Accelerate (recomendada para producción)
+dev_PRISMA_DATABASE_URL="prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqd3RfaWQiOjEsInNlY3VyZV9rZXkiOiJza19oeFJWWDhQNjlMWEgyN3AzSFVhbWQiLCJhcGlfa2V5IjoiMDFLNVNTNDY0QjBYWlNCMlNWRUc4NVlIVjYiLCJ0ZW5hbnRfaWQiOiI2MmQ4NjkxYzBiY2EwNGE1ZmNiMGE4ZWU5MjQzNWUxZGU0ZDhlZDYwOGYxMGZiMmE4ZWM1OTdmNDU4M2U1Y2IxIiwiaW50ZXJuYWxfc2VjcmV0IjoiOGNiZDNmNzQtNmE4Yi00Njk3LTg0NTktYWJlMmNkN2Q5NDlkIn0._6KDiMWwgiOHO65UkNvss0xDdQFTh7OVkB_cRzYfI-c"
+
+# URL directa de PostgreSQL (alternativa)
+DATABASE_URL="postgres://62d8691c0bca04a5fcb0a8ee92435e1de4d8ed608f10fb2a8ec597f4583e5cb1:sk_hxRVX8P69LXH27p3HUamd@db.prisma.io:5432/postgres?sslmode=require"
+
 NEXTAUTH_URL="https://remitero-dev.vercel.app"
 NEXTAUTH_SECRET="secret-dev"
 ```
@@ -44,15 +52,26 @@ NEXTAUTH_SECRET="secret-dev"
    - Agregar `NEXTAUTH_URL` para Production
    - Agregar `NEXTAUTH_SECRET` para Production
 
-3. **Configurar Preview**:
-   - Agregar `DATABASE_URL` para Preview
-   - Agregar `NEXTAUTH_URL` para Preview
-   - Agregar `NEXTAUTH_SECRET` para Preview
-
-4. **Crear Base de Datos de Desarrollo**:
-   - Crear nueva base de datos PostgreSQL
-   - Ejecutar migraciones
-   - Poblar con datos de prueba
+3. **Configurar Preview/Desarrollo**:
+   - Agregar `dev_POSTGRES_URL` para Preview/Development
+   - Agregar `dev_PRISMA_DATABASE_URL` para Preview/Development (recomendado)
+   - Agregar `DATABASE_URL` para Preview/Development (alternativa)
+   - Agregar `NEXTAUTH_URL` para Preview/Development
+   - Agregar `NEXTAUTH_SECRET` para Preview/Development
+
+4. **Configurar Base de Datos de Desarrollo**:
+   - ✅ Base de datos PostgreSQL ya creada en Prisma
+   - ✅ URLs de conexión configuradas
+   - Ejecutar migraciones: `npx prisma migrate dev`
+   - Poblar con datos de prueba: `npx prisma db seed`
+
+## 🔗 URLs de Conexión Actualizadas
+
+### Para Desarrollo:
+- **Prisma Accelerate** (recomendado): `dev_PRISMA_DATABASE_URL`
+- **PostgreSQL directo**: `dev_POSTGRES_URL` o `DATABASE_URL`
+- **Host**: `db.prisma.io:5432`
+- **SSL**: Requerido (`sslmode=require`)
 
 ## 🚀 Beneficios
 
diff --git a/env.development b/env.development
new file mode 100644
index 0000000..d0529ad
--- /dev/null
+++ b/env.development
@@ -0,0 +1,17 @@
+# Variables de entorno para DEVELOPMENT LOCAL
+# Usar con: vercel env pull env.development --environment=development
+
+# Base de datos de desarrollo
+DATABASE_URL="postgres://62d8691c0bca04a5fcb0a8ee92435e1de4d8ed608f10fb2a8ec597f4583e5cb1:sk_hxRVX8P69LXH27p3HUamd@db.prisma.io:5432/postgres?sslmode=require"
+
+# NextAuth configuración para development local
+NEXTAUTH_URL="http://localhost:3000"
+NEXTAUTH_SECRET="puntoindigo-diego-secret-key-1"
+
+# URLs alternativas de desarrollo (si es necesario)
+dev_POSTGRES_URL="postgres://62d8691c0bca04a5fcb0a8ee92435e1de4d8ed608f10fb2a8ec597f4583e5cb1:sk_hxRVX8P69LXH27p3HUamd@db.prisma.io:5432/postgres?sslmode=require"
+dev_PRISMA_DATABASE_URL="prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqd3RfaWQiOjEsInNlY3VyZV9rZXkiOiJza19oeFJWWDhQNjlMWEgyN3AzSFVhbWQiLCJhcGlfa2V5IjoiMDFLNVNTNDY0QjBYWlNCMlNWRUc4NVlIVjYiLCJ0ZW5hbnRfaWQiOiI2MmQ4NjkxYzBiY2EwNGE1ZmNiMGE4ZWM1OTdmNDU4M2U1Y2IxIiwiaW50ZXJuYWxfc2VjcmV0IjoiOGNiZDNmNzQtNmE4Yi00Njk3LTg0NTktYWJlMmNkN2Q5NDlkIn0._6KDiMWwgiOHO65UkNvss0xDdQFTh7OVkB_cRzYfI-c"
+
+# Entorno
+NODE_ENV="development"
+VERCEL_ENV="development"
diff --git a/env.example b/env.example
index 9087f11..a43ced4 100644
--- a/env.example
+++ b/env.example
@@ -1,5 +1,12 @@
-# Base de datos
-DATABASE_URL="postgresql://username:password@host:port/database"
+# Base de datos - Desarrollo
+# URL directa de PostgreSQL
+dev_POSTGRES_URL="postgres://username:password@host:port/database?sslmode=require"
+
+# URL de Prisma Accelerate (recomendada para desarrollo)
+dev_PRISMA_DATABASE_URL="prisma+postgres://accelerate.prisma-data.net/?api_key=your_api_key"
+
+# URL directa de PostgreSQL (alternativa)
+DATABASE_URL="postgres://username:password@host:port/database?sslmode=require"
 
 # NextAuth
 NEXTAUTH_URL="http://localhost:3000"
diff --git a/env.preview b/env.preview
new file mode 100644
index 0000000..1e1a8fe
--- /dev/null
+++ b/env.preview
@@ -0,0 +1,17 @@
+# Variables de entorno para PREVIEW/DEVELOPMENT
+# Usar con: vercel env pull env.preview --environment=preview
+
+# Base de datos de desarrollo
+DATABASE_URL="postgres://62d8691c0bca04a5fcb0a8ee92435e1de4d8ed608f10fb2a8ec597f4583e5cb1:sk_hxRVX8P69LXH27p3HUamd@db.prisma.io:5432/postgres?sslmode=require"
+
+# NextAuth configuración para preview/development
+NEXTAUTH_URL="https://remitero-dev.vercel.app"
+NEXTAUTH_SECRET="puntoindigo-diego-secret-key-1"
+
+# URLs alternativas de desarrollo (si es necesario)
+dev_POSTGRES_URL="postgres://62d8691c0bca04a5fcb0a8ee92435e1de4d8ed608f10fb2a8ec597f4583e5cb1:sk_hxRVX8P69LXH27p3HUamd@db.prisma.io:5432/postgres?sslmode=require"
+dev_PRISMA_DATABASE_URL="prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqd3RfaWQiOjEsInNlY3VyZV9rZXkiOiJza19oeFJWWDhQNjlMWEgyN3AzSFVhbWQiLCJhcGlfa2V5IjoiMDFLNVNTNDY0QjBYWlNCMlNWRUc4NVlIVjYiLCJ0ZW5hbnRfaWQiOiI2MmQ4NjkxYzBiY2EwNGE1ZmNiMGE4ZWM1OTdmNDU4M2U1Y2IxIiwiaW50ZXJuYWxfc2VjcmV0IjoiOGNiZDNmNzQtNmE4Yi00Njk3LTg0NTktYWJlMmNkN2Q5NDlkIn0._6KDiMWwgiOHO65UkNvss0xDdQFTh7OVkB_cRzYfI-c"
+
+# Entorno
+NODE_ENV="development"
+VERCEL_ENV="preview"
diff --git a/env.production b/env.production
new file mode 100644
index 0000000..9d8229f
--- /dev/null
+++ b/env.production
@@ -0,0 +1,17 @@
+# Variables de entorno para PRODUCCIÓN
+# Usar con: vercel env pull env.production --environment=production
+
+# Base de datos de producción
+DATABASE_URL="postgres://58a71080a9a7b2f13b48f45d6141d53bb3e306329eb05e844f7136571d5611a7:sk_Ks5DsRUZncyFERgiKEHcy@db.prisma.io:5432/postgres?sslmode=require"
+
+# NextAuth configuración para producción
+NEXTAUTH_URL="https://v0-remitero.vercel.app"
+NEXTAUTH_SECRET="puntoindigo-diego-secret-key-1"
+
+# URLs alternativas de producción (si es necesario)
+prod_POSTGRES_URL="postgres://58a71080a9a7b2f13b48f45d6141d53bb3e306329eb05e844f7136571d5611a7:sk_Ks5DsRUZncyFERgiKEHcy@db.prisma.io:5432/postgres?sslmode=require"
+prod_PRISMA_DATABASE_URL="prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqd3RfaWQiOjEsInNlY3VyZV9rZXkiOiJza19LczVEc1JVWm5jeUZFUmdpS0VIY3kiLCJhcGlfa2V5IjoiMDFLNVhQWDZZU0NXTjNDTlczM003VjBWUzkiLCJ0ZW5hbnRfaWQiOiI1OGE3MTA4MGE5YTdiMmYxM2I0OGY0NWQ2MTQxZDUzYmIzZTMwNjMyOWViMDVlODQ0ZjcxMzY1NzFkNTYxMWE3IiwiaW50ZXJuYWxfc2VjcmV0IjoiNmQ1NDY5MDQtZTE5OC00NWU0LTkwMTYtZGQyZjkxMDkzOTA4In0.SwLnPMOTHx3IQxyUN_I2CmbgZK5eh4RSumd5EKwnZrQ"
+
+# Entorno
+NODE_ENV="production"
+VERCEL_ENV="production"
diff --git a/prisma/schema.prisma b/prisma/schema.prisma
index 7c96d62..f82b35f 100644
--- a/prisma/schema.prisma
+++ b/prisma/schema.prisma
@@ -7,133 +7,135 @@ datasource db {
   url      = env("DATABASE_URL")
 }
 
-enum Role { 
-  SUPERADMIN 
-  ADMIN 
-  USER 
-}
-
-enum DeliveryStatus { 
-  PENDIENTE 
-  PREPARADO 
-  ENTREGADO 
-}
+model Category {
+  id        String    @id
+  companyId String
+  name      String
+  createdAt DateTime  @default(now())
+  updatedAt DateTime
+  Company   Company   @relation(fields: [companyId], references: [id])
+  Product   Product[]
 
-enum StockStatus {
-  IN_STOCK
-  OUT_OF_STOCK
+  @@unique([companyId, name])
 }
 
-model Company {
-  id          String   @id @default(cuid())
-  name        String   @unique
-  createdAt   DateTime @default(now())
-  updatedAt   DateTime @updatedAt
-  users       User[]
-  categories  Category[]
-  products    Product[]
-  clients     Client[]
-  remitos     Remito[]
-}
+model Client {
+  id        String   @id
+  companyId String
+  name      String
+  address   String?
+  phone     String?
+  email     String?
+  createdAt DateTime @default(now())
+  updatedAt DateTime
+  Company   Company  @relation(fields: [companyId], references: [id])
+  Remito    Remito[]
 
-model User {
-  id          String   @id @default(cuid())
-  companyId   String?
-  company     Company? @relation(fields: [companyId], references: [id])
-  email       String   @unique
-  password    String   // hash bcrypt
-  name        String
-  role        Role     @default(USER)
-  address     String?
-  phone       String?
-  createdAt   DateTime @default(now())
-  updatedAt   DateTime @updatedAt
-  // impersonation support
-  impersonatingUserId String?
-  createdRemitos      Remito[] @relation("CreatedBy")
-  statusHistory       StatusHistory[]
+  @@unique([companyId, name])
 }
 
-model Category {
-  id          String   @id @default(cuid())
-  companyId   String
-  company     Company  @relation(fields: [companyId], references: [id])
-  name        String
-  createdAt   DateTime @default(now())
-  updatedAt   DateTime @updatedAt
-  products    Product[]
-  @@unique([companyId, name])
+model Company {
+  id        String     @id
+  name      String     @unique
+  createdAt DateTime   @default(now())
+  updatedAt DateTime
+  Category  Category[]
+  Client    Client[]
+  Product   Product[]
+  Remito    Remito[]
+  User      User[]
 }
 
 model Product {
-  id          String   @id @default(cuid())
+  id          String       @id
   companyId   String
-  company     Company  @relation(fields: [companyId], references: [id])
   categoryId  String?
-  category    Category? @relation(fields: [categoryId], references: [id])
   name        String
   description String?
   price       Decimal
-  stock       StockStatus @default(OUT_OF_STOCK)
-  createdAt   DateTime @default(now())
-  updatedAt   DateTime @updatedAt
-  remitoItems RemitoItem[]
-  @@unique([companyId, name])
-}
+  stock       StockStatus  @default(OUT_OF_STOCK)
+  createdAt   DateTime     @default(now())
+  updatedAt   DateTime
+  Category    Category?    @relation(fields: [categoryId], references: [id])
+  Company     Company      @relation(fields: [companyId], references: [id])
+  RemitoItem  RemitoItem[]
 
-model Client {
-  id          String   @id @default(cuid())
-  companyId   String
-  company     Company  @relation(fields: [companyId], references: [id])
-  name        String
-  address     String?
-  phone       String?
-  email       String?
-  createdAt   DateTime @default(now())
-  updatedAt   DateTime @updatedAt
-  remitos     Remito[]
   @@unique([companyId, name])
 }
 
 model Remito {
-  id          String   @id @default(cuid())
-  companyId   String
-  company     Company  @relation(fields: [companyId], references: [id])
-  number      Int      // numeración por empresa
-  clientId    String
-  client      Client   @relation(fields: [clientId], references: [id])
-  status      DeliveryStatus @default(PENDIENTE)
-  statusAt    DateTime @default(now()) // fecha/hora del último cambio de estado (visible)
-  items       RemitoItem[]
-  notes       String?
-  createdById String
-  createdBy   User     @relation("CreatedBy", fields: [createdById], references: [id])
-  createdAt   DateTime @default(now())
-  updatedAt   DateTime @updatedAt
-  history     StatusHistory[]
+  id            String          @id
+  companyId     String
+  number        Int
+  clientId      String
+  status        DeliveryStatus  @default(PENDIENTE)
+  statusAt      DateTime        @default(now())
+  notes         String?
+  createdById   String
+  createdAt     DateTime        @default(now())
+  updatedAt     DateTime
+  Client        Client          @relation(fields: [clientId], references: [id])
+  Company       Company         @relation(fields: [companyId], references: [id])
+  User          User            @relation(fields: [createdById], references: [id])
+  RemitoItem    RemitoItem[]
+  StatusHistory StatusHistory[]
+
   @@unique([companyId, number])
 }
 
 model RemitoItem {
-  id             String   @id @default(cuid())
-  remitoId       String
-  remito         Remito   @relation(fields: [remitoId], references: [id])
-  productId      String?  // nullable si el producto fue borrado luego
-  product        Product? @relation(fields: [productId], references: [id])
-  quantity       Int
-  // Snapshot de producto en el momento del remito
-  productName    String
-  productDesc    String?
-  unitPrice      Decimal
-  lineTotal      Decimal
+  id          String   @id
+  remitoId    String
+  productId   String?
+  quantity    Int
+  productName String
+  productDesc String?
+  unitPrice   Decimal
+  lineTotal   Decimal
+  Product     Product? @relation(fields: [productId], references: [id])
+  Remito      Remito   @relation(fields: [remitoId], references: [id])
 }
 
 model StatusHistory {
-  id        String         @id @default(cuid())
-  remitoId  String
-  remito    Remito         @relation(fields: [remitoId], references: [id])
-  status    DeliveryStatus
-  at        DateTime       @default(now())
-  byUserId  String?
-  byUser    User?          @relation(fields: [byUserId], references: [id])
-}
\ No newline at end of file
+  id       String         @id
+  remitoId String
+  status   DeliveryStatus
+  at       DateTime       @default(now())
+  byUserId String?
+  User     User?          @relation(fields: [byUserId], references: [id])
+  Remito   Remito         @relation(fields: [remitoId], references: [id])
+}
+
+model User {
+  id                  String          @id
+  companyId           String?
+  email               String          @unique
+  password            String
+  name                String
+  role                Role            @default(USER)
+  address             String?
+  phone               String?
+  createdAt           DateTime        @default(now())
+  updatedAt           DateTime
+  impersonatingUserId String?
+  Remito              Remito[]
+  StatusHistory       StatusHistory[]
+  Company             Company?        @relation(fields: [companyId], references: [id])
+}
+
+enum DeliveryStatus {
+  PENDIENTE
+  PREPARADO
+  ENTREGADO
+}
+
+enum Role {
+  SUPERADMIN
+  ADMIN
+  USER
+}
+
+enum StockStatus {
+  IN_STOCK
+  OUT_OF_STOCK
+}
diff --git a/scripts/clean-stock-descriptions.js b/scripts/clean-stock-descriptions.js
deleted file mode 100644
index 182c4ab..0000000
--- a/scripts/clean-stock-descriptions.js
+++ /dev/null
@@ -1,65 +0,0 @@
-const { PrismaClient } = require('@prisma/client');
-
-const prisma = new PrismaClient();
-
-async function cleanStockDescriptions() {
-  try {
-    console.log('🧹 Limpiando descripciones que contienen información de stock...');
-    
-    // Buscar productos que tengan "Stock: " en la descripción
-    const productsWithStockInDescription = await prisma.product.findMany({
-      where: {
-        description: {
-          contains: 'Stock: '
-        }
-      },
-      select: {
-        id: true,
-        name: true,
-        description: true,
-        stock: true
-      }
-    });
-    
-    console.log(`📊 Encontrados ${productsWithStockInDescription.length} productos con stock en descripción`);
-    
-    for (const product of productsWithStockInDescription) {
-      console.log(`\n🔍 Procesando: ${product.name}`);
-      console.log(`   Descripción actual: "${product.description}"`);
-      console.log(`   Stock actual: ${product.stock}`);
-      
-      // Extraer el stock de la descripción
-      const stockMatch = product.description.match(/Stock: (IN_STOCK|OUT_OF_STOCK)/);
-      const stockFromDescription = stockMatch ? stockMatch[1] : null;
-      
-      if (stockFromDescription) {
-        console.log(`   Stock encontrado en descripción: ${stockFromDescription}`);
-        
-        // Limpiar la descripción removiendo "Stock: XXX"
-        const cleanDescription = product.description.replace(/Stock: (IN_STOCK|OUT_OF_STOCK)/, '').trim();
-        
-        // Actualizar el producto con la descripción limpia y el stock correcto
-        await prisma.product.update({
-          where: { id: product.id },
-          data: {
-            description: cleanDescription || null,
-            stock: stockFromDescription
-          }
-        });
-        
-        console.log(`   ✅ Actualizado - Descripción: "${cleanDescription || 'null'}", Stock: ${stockFromDescription}`);
-      } else {
-        console.log(`   ⚠️  No se pudo extraer stock de la descripción`);
-      }
-    }
-    
-    console.log('\n🎉 Limpieza completada exitosamente');
-    
-  } catch (error) {
-    console.error('❌ Error durante la limpieza:', error);
-  } finally {
-    await prisma.$disconnect();
-  }
-}
-
-cleanStockDescriptions();
diff --git a/scripts/configure-db-variables.sh b/scripts/configure-db-variables.sh
deleted file mode 100755
index 7bdec6f..0000000
--- a/scripts/configure-db-variables.sh
+++ /dev/null
@@ -1,19 +0,0 @@
-#!/bin/bash
-
-echo "🔧 Configurando variables de base de datos para entornos separados..."
-
-# Verificar variables actuales
-echo "📋 Variables actuales:"
-vercel env ls | grep DATABASE_URL
-
-echo ""
-echo "✅ CONFIGURACIÓN ACTUAL:"
-echo "• Preview (develop): Usa dev_DATABASE_URL"
-echo "• Production: Usa DATABASE_URL"
-echo ""
-echo "🔍 Para verificar que funciona:"
-echo "1. Preview: https://remitero-dev.vercel.app/"
-echo "2. Production: https://v0-remitero.vercel.app/"
-echo ""
-echo "📝 Las variables ya están configuradas correctamente en Vercel Dashboard"
-echo "🔗 Dashboard: https://vercel.com/daeiman0/v0-remitero/settings/environment-variables"
diff --git a/scripts/configure-separate-databases.sh b/scripts/configure-separate-databases.sh
deleted file mode 100755
index 76accd0..0000000
--- a/scripts/configure-separate-databases.sh
+++ /dev/null
@@ -1,53 +0,0 @@
-#!/bin/bash
-
-echo "🔧 Configurando bases de datos separadas..."
-
-# Verificar que estamos en el directorio correcto
-if [ ! -f "package.json" ]; then
-    echo "❌ Error: No estás en el directorio del proyecto"
-    exit 1
-fi
-
-echo "📋 Variables de entorno actuales:"
-vercel env ls
-
-echo ""
-echo "🔍 Análisis de configuración actual:"
-echo "- DATABASE_URL está configurada para TODOS los entornos"
-echo "- Necesitamos separar las bases de datos"
-
-echo ""
-echo "📝 Pasos para configurar bases de datos separadas:"
-echo ""
-echo "1. 🗄️  CREAR BASE DE DATOS DE DESARROLLO:"
-echo "   - Ve a https://vercel.com/dashboard"
-echo "   - Selecciona el proyecto 'v0-remitero'"
-echo "   - Ve a Settings > Environment Variables"
-echo "   - Crea una nueva variable:"
-echo "     - Name: dev_DATABASE_URL"
-echo "     - Value: [URL de tu base de datos de desarrollo]"
-echo "     - Environments: Preview, Development"
-echo ""
-echo "2. 🔒 CONFIGURAR DATABASE_URL SOLO PARA PRODUCCIÓN:"
-echo "   - Edita la variable DATABASE_URL existente"
-echo "   - Cambia Environments a: Production únicamente"
-echo ""
-echo "3. 🧪 VERIFICAR CONFIGURACIÓN:"
-echo "   - Ejecuta: vercel env ls"
-echo "   - Deberías ver:"
-echo "     - DATABASE_URL: Production únicamente"
-echo "     - dev_DATABASE_URL: Preview, Development"
-echo ""
-echo "4. 🚀 REDEPLOY:"
-echo "   - Ejecuta: ./scripts/deploy-develop.sh"
-echo "   - Ejecuta: ./scripts/deploy-production.sh"
-
-echo ""
-echo "💡 ALTERNATIVA - Usar Vercel CLI:"
-echo "vercel env add dev_DATABASE_URL --scope=preview"
-echo "vercel env add dev_DATABASE_URL --scope=development"
-echo "vercel env rm DATABASE_URL --scope=preview"
-echo "vercel env rm DATABASE_URL --scope=development"
-
-echo ""
-echo "✅ Script completado. Sigue los pasos manuales arriba."
diff --git a/scripts/create-status-history.js b/scripts/create-status-history.js
new file mode 100644
index 0000000..8d2f626
--- /dev/null
+++ b/scripts/create-status-history.js
@@ -0,0 +1,55 @@
+const { PrismaClient } = require('@prisma/client');
+const { v4: uuidv4 } = require('uuid');
+
+async function createStatusHistory() {
+    console.log('📝 Creando historial de estado para remitos...');
+    
+    const prisma = new PrismaClient({
+        datasources: {
+            db: {
+                url: process.env.DATABASE_URL || "postgres://62d8691c0bca04a5fcb0a8ee92435e1de4d8ed608f10fb2a8ec597f4583e5cb1:sk_hxRVX8P69LXH27p3HUamd@db.prisma.io:5432/postgres?sslmode=require"
+            }
+        }
+    });
+
+    try {
+        await prisma.$connect();
+        console.log('✅ Conexión exitosa a la base de datos');
+
+        // Obtener los remitos existentes
+        const remitos = await prisma.remito.findMany({
+            take: 2,
+            include: {
+                User: true
+            }
+        });
+
+        console.log(`📄 Encontrados ${remitos.length} remitos`);
+
+        for (const remito of remitos) {
+            // Crear historial de estado
+            const statusHistory = await prisma.statusHistory.create({
+                data: {
+                    id: uuidv4(),
+                    remitoId: remito.id,
+                    status: 'PENDIENTE',
+                    at: remito.createdAt,
+                    byUserId: remito.createdById
+                }
+            });
+
+            console.log(`✅ Historial creado para remito #${remito.number}: ${statusHistory.status}`);
+        }
+
+        // Verificar el conteo
+        const historyCount = await prisma.statusHistory.count();
+        console.log(`📊 Total de registros de historial: ${historyCount}`);
+
+    } catch (error) {
+        console.error('❌ Error:', error.message);
+    } finally {
+        await prisma.$disconnect();
+    }
+}
+
+createStatusHistory();
diff --git a/scripts/deploy-dev.sh b/scripts/deploy-dev.sh
deleted file mode 100755
index 8e18e85..0000000
--- a/scripts/deploy-dev.sh
+++ /dev/null
@@ -1,21 +0,0 @@
-#!/bin/bash
-
-echo "🚀 Desplegando entorno de desarrollo..."
-
-# Cambiar a branch develop
-git checkout develop
-
-# Hacer pull de los últimos cambios
-git pull origin develop
-
-# Instalar dependencias
-npm install
-
-# Hacer commit y push (esto activará el deploy automático)
-git add .
-git commit -m "deploy: actualización de desarrollo $(date)" || echo "No hay cambios para commitear"
-git push origin develop
-
-echo "✅ Push completado - Vercel hará deploy automático"
-echo "🌐 URL: https://remitero-nextjs-[hash].vercel.app"
-echo "📋 Verifica en Vercel Dashboard para la URL exacta"
diff --git a/scripts/deploy-develop.sh b/scripts/deploy-develop.sh
deleted file mode 100755
index 846554d..0000000
--- a/scripts/deploy-develop.sh
+++ /dev/null
@@ -1,23 +0,0 @@
-#!/bin/bash
-
-# Script para deploy manual a develop (preview)
-echo "🚀 Deploying to develop (preview)..."
-
-# Verificar que estamos en develop
-current_branch=$(git branch --show-current)
-if [ "$current_branch" != "develop" ]; then
-    echo "❌ Error: Debes estar en el branch 'develop'"
-    echo "Ejecuta: git checkout develop"
-    exit 1
-fi
-
-# Hacer push a develop
-echo "📤 Pushing to develop..."
-git push origin develop
-
-# Deploy manual a preview
-echo "🌐 Deploying to preview..."
-vercel --yes
-
-echo "✅ Deploy a develop completado!"
-echo "🔗 URL Preview: https://v0-remitero-dev.vercel.app"
diff --git a/scripts/deploy-prod.sh b/scripts/deploy-prod.sh
deleted file mode 100755
index 85c658d..0000000
--- a/scripts/deploy-prod.sh
+++ /dev/null
@@ -1,28 +0,0 @@
-#!/bin/bash
-
-echo "🚀 Desplegando entorno de producción..."
-
-# Cambiar a branch main
-git checkout main
-
-# Hacer pull de los últimos cambios
-git pull origin main
-
-# Instalar dependencias
-npm install
-
-# Ejecutar migración de base de datos
-echo "📝 Ejecutando migración de base de datos..."
-node scripts/migrate-vercel.js
-
-# Hacer build
-echo "🔨 Construyendo aplicación..."
-npm run build
-
-# Hacer commit y push
-git add .
-git commit -m "deploy: actualización de producción $(date)"
-git push origin main
-
-echo "✅ Despliegue de producción completado"
-echo "🌐 URL: https://remitero-prod.vercel.app"
diff --git a/scripts/deploy-production.sh b/scripts/deploy-production.sh
deleted file mode 100755
index 140ff61..0000000
--- a/scripts/deploy-production.sh
+++ /dev/null
@@ -1,20 +0,0 @@
-#!/bin/bash
-
-# Script para deploy automático a producción
-echo "🚀 Deploying to production..."
-
-# Verificar que estamos en main
-current_branch=$(git branch --show-current)
-if [ "$current_branch" != "main" ]; then
-    echo "❌ Error: Debes estar en el branch 'main'"
-    echo "Ejecuta: git checkout main"
-    exit 1
-fi
-
-# Hacer push a main (esto activará el deploy automático)
-echo "📤 Pushing to main (deploy automático)..."
-git push origin main
-
-echo "✅ Deploy a producción iniciado!"
-echo "🔗 URL Producción: https://v0-remitero.vercel.app"
-echo "ℹ️  El deploy es automático, no ejecutes 'vercel --prod'"
diff --git a/scripts/dev-db.js b/scripts/dev-db.js
deleted file mode 100755
index 2a783eb..0000000
--- a/scripts/dev-db.js
+++ /dev/null
@@ -1,174 +0,0 @@
-#!/usr/bin/env node
-
-const { PrismaClient } = require('@prisma/client');
-const bcrypt = require('bcryptjs');
-
-// Script para ejecutar queries en la base de datos de desarrollo
-const prisma = new PrismaClient({
-  datasources: {
-    db: {
-      url: process.env.dev_DATABASE_URL || process.env.dev_PRISMA_DATABASE_URL
-    }
-  }
-});
-
-async function main() {
-  const command = process.argv[2];
-  
-  if (!command) {
-    console.log('🔧 Script de base de datos de desarrollo');
-    console.log('Uso: node scripts/dev-db.js <comando>');
-    console.log('');
-    console.log('Comandos disponibles:');
-    console.log('  populate    - Poblar datos básicos');
-    console.log('  clear       - Limpiar todos los datos');
-    console.log('  status      - Ver estado de las tablas');
-    console.log('  query       - Ejecutar query personalizada');
-    return;
-  }
-
-  try {
-    switch (command) {
-      case 'populate':
-        await populateData();
-        break;
-      case 'clear':
-        await clearData();
-        break;
-      case 'status':
-        await showStatus();
-        break;
-      case 'query':
-        await executeQuery();
-        break;
-      default:
-        console.log('❌ Comando no reconocido:', command);
-    }
-  } catch (error) {
-    console.error('❌ Error:', error.message);
-  } finally {
-    await prisma.$disconnect();
-  }
-}
-
-async function populateData() {
-  console.log('🚀 Poblando datos de desarrollo...');
-  
-  // Crear company
-  const company = await prisma.company.upsert({
-    where: { name: "Distribuidora Ruben" },
-    update: {},
-    create: { name: "Distribuidora Ruben" }
-  });
-  console.log('✅ Company:', company.name);
-  
-  // Crear usuarios
-  const hashedPassword = await bcrypt.hash("daedae123", 10);
-  const user = await prisma.user.upsert({
-    where: { email: "admin@remitero.com" },
-    update: {},
-    create: {
-      name: "Super Admin",
-      email: "admin@remitero.com",
-      password: hashedPassword,
-      role: "SUPERADMIN",
-      companyId: company.id
-    }
-  });
-  console.log('✅ User:', user.name);
-  
-  // Crear categorías
-  const categoria1 = await prisma.category.upsert({
-    where: { companyId_name: { name: "Productos de Limpieza", companyId: company.id } },
-    update: {},
-    create: { name: "Productos de Limpieza", companyId: company.id }
-  });
-  
-  const categoria2 = await prisma.category.upsert({
-    where: { companyId_name: { name: "Alimentos", companyId: company.id } },
-    update: {},
-    create: { name: "Alimentos", companyId: company.id }
-  });
-  console.log('✅ Categorías creadas');
-  
-  // Crear productos
-  const productos = [
-    { name: "Detergente Líquido", description: "Detergente líquido para ropa", unitPrice: 450.00, stock: "IN_STOCK", categoryId: categoria1.id, companyId: company.id },
-    { name: "Arroz Blanco", description: "Arroz blanco premium", unitPrice: 320.00, stock: "IN_STOCK", categoryId: categoria2.id, companyId: company.id }
-  ];
-  
-  for (const productoData of productos) {
-    await prisma.product.upsert({
-      where: { companyId_name: { name: productoData.name, companyId: company.id } },
-      update: {},
-      create: productoData
-    });
-  }
-  console.log('✅ Productos creados');
-  
-  // Crear clientes
-  const clientes = [
-    { name: "Cliente Demo 1", address: "Av. Principal 123", phone: "+54 11 1234-5678", email: "cliente1@demo.com", companyId: company.id },
-    { name: "Cliente Demo 2", address: "Calle Secundaria 456", phone: "+54 11 8765-4321", email: "cliente2@demo.com", companyId: company.id }
-  ];
-  
-  for (const clienteData of clientes) {
-    await prisma.client.upsert({
-      where: { companyId_name: { name: clienteData.name, companyId: company.id } },
-      update: {},
-      create: clienteData
-    });
-  }
-  console.log('✅ Clientes creados');
-  
-  console.log('🎉 Datos poblados exitosamente');
-}
-
-async function clearData() {
-  console.log('🗑️ Limpiando datos de desarrollo...');
-  
-  await prisma.remitoItem.deleteMany();
-  await prisma.statusHistory.deleteMany();
-  await prisma.remito.deleteMany();
-  await prisma.product.deleteMany();
-  await prisma.client.deleteMany();
-  await prisma.category.deleteMany();
-  await prisma.user.deleteMany();
-  await prisma.company.deleteMany();
-  
-  console.log('✅ Datos limpiados');
-}
-
-async function showStatus() {
-  console.log('📊 Estado de las tablas:');
-  
-  const counts = await Promise.all([
-    prisma.company.count(),
-    prisma.user.count(),
-    prisma.category.count(),
-    prisma.product.count(),
-    prisma.client.count(),
-    prisma.remito.count()
-  ]);
-  
-  console.log(`  Companies: ${counts[0]}`);
-  console.log(`  Users: ${counts[1]}`);
-  console.log(`  Categories: ${counts[2]}`);
-  console.log(`  Products: ${counts[3]}`);
-  console.log(`  Clients: ${counts[4]}`);
-  console.log(`  Remitos: ${counts[5]}`);
-}
-
-async function executeQuery() {
-  const query = process.argv[3];
-  if (!query) {
-    console.log('❌ Debe proporcionar una query');
-    return;
-  }
-  
-  console.log('🔍 Ejecutando query:', query);
-  const result = await prisma.$queryRawUnsafe(query);
-  console.log('✅ Resultado:', JSON.stringify(result, null, 2));
-}
-
-main();
diff --git a/scripts/migrate-database.js b/scripts/migrate-database.js
new file mode 100755
index 0000000..f243d5a
--- /dev/null
+++ b/scripts/migrate-database.js
@@ -0,0 +1,370 @@
+#!/usr/bin/env node
+
+const { PrismaClient } = require('@prisma/client');
+const bcrypt = require('bcryptjs');
+const { v4: uuidv4 } = require('uuid');
+
+// URLs de las bases de datos
+const DATABASE_URLS = {
+  dev: "postgres://62d8691c0bca04a5fcb0a8ee92435e1de4d8ed608f10fb2a8ec597f4583e5cb1:sk_hxRVX8P69LXH27p3HUamd@db.prisma.io:5432/postgres?sslmode=require",
+  prod: "postgres://58a71080a9a7b2f13b48f45d6141d53bb3e306329eb05e844f7136571d5611a7:sk_Ks5DsRUZncyFERgiKEHcy@db.prisma.io:5432/postgres?sslmode=require"
+};
+
+// Función para crear cliente Prisma
+function createPrismaClient(databaseUrl) {
+  return new PrismaClient({
+    datasources: {
+      db: {
+        url: databaseUrl
+      }
+    }
+  });
+}
+
+// Función para obtener estadísticas de una base de datos
+async function getDatabaseStats(prisma) {
+  const stats = {};
+  
+  try {
+    stats.users = await prisma.user.count();
+  } catch (e) { stats.users = 0; }
+  
+  try {
+    stats.companies = await prisma.company.count();
+  } catch (e) { stats.companies = 0; }
+  
+  try {
+    stats.categories = await prisma.category.count();
+  } catch (e) { stats.categories = 0; }
+  
+  try {
+    stats.products = await prisma.product.count();
+  } catch (e) { stats.products = 0; }
+  
+  try {
+    stats.clients = await prisma.client.count();
+  } catch (e) { stats.clients = 0; }
+  
+  try {
+    stats.remitos = await prisma.remito.count();
+  } catch (e) { stats.remitos = 0; }
+  
+  try {
+    stats.remitoItems = await prisma.remitoItem.count();
+  } catch (e) { stats.remitoItems = 0; }
+  
+  try {
+    stats.remitoHistory = await prisma.statusHistory.count();
+  } catch (e) { stats.remitoHistory = 0; }
+  
+  return stats;
+}
+
+// Función para mostrar estadísticas
+function displayStats(stats, label) {
+  console.log(`\n📊 ${label}:`);
+  console.log(`  👥 Usuarios: ${stats.users}`);
+  console.log(`  🏢 Empresas: ${stats.companies}`);
+  console.log(`  📂 Categorías: ${stats.categories}`);
+  console.log(`  📦 Productos: ${stats.products}`);
+  console.log(`  👤 Clientes: ${stats.clients}`);
+  console.log(`  📄 Remitos: ${stats.remitos}`);
+  console.log(`  📋 Items de Remitos: ${stats.remitoItems}`);
+  console.log(`  📝 Historial de Remitos: ${stats.remitoHistory}`);
+}
+
+// Función para migrar datos de una base a otra
+async function migrateData(sourceUrl, targetUrl, direction) {
+  const sourcePrisma = createPrismaClient(sourceUrl);
+  const targetPrisma = createPrismaClient(targetUrl);
+
+  try {
+    console.log(`\n🔄 Iniciando migración ${direction}...`);
+    
+    // Conectar a ambas bases de datos
+    await sourcePrisma.$connect();
+    await targetPrisma.$connect();
+    console.log('✅ Conexiones establecidas');
+
+    // Obtener estadísticas de origen
+    const sourceStats = await getDatabaseStats(sourcePrisma);
+    displayStats(sourceStats, 'Base de datos ORIGEN');
+
+    // Obtener estadísticas de destino
+    const targetStats = await getDatabaseStats(targetPrisma);
+    displayStats(targetStats, 'Base de datos DESTINO');
+
+    // Confirmar migración
+    console.log(`\n⚠️  ADVERTENCIA: Esta operación va a SOBRESCRIBIR todos los datos en la base de datos destino.`);
+    console.log(`📋 Datos a migrar:`);
+    console.log(`  • ${sourceStats.users} usuarios`);
+    console.log(`  • ${sourceStats.companies} empresas`);
+    console.log(`  • ${sourceStats.categories} categorías`);
+    console.log(`  • ${sourceStats.products} productos`);
+    console.log(`  • ${sourceStats.clients} clientes`);
+    console.log(`  • ${sourceStats.remitos} remitos`);
+    console.log(`  • ${sourceStats.remitoItems} items de remitos`);
+    console.log(`  • ${sourceStats.remitoHistory} historial de remitos`);
+
+    // En modo no interactivo, proceder automáticamente
+    if (process.argv.includes('--force')) {
+      console.log('\n🚀 Modo forzado activado, procediendo con la migración...');
+    } else {
+      console.log('\n❓ ¿Continuar con la migración? (Ctrl+C para cancelar)');
+      console.log('💡 Usa --force para omitir esta confirmación');
+      
+      // Esperar 5 segundos para que el usuario pueda cancelar
+      await new Promise(resolve => setTimeout(resolve, 5000));
+      console.log('⏰ Tiempo de espera completado, procediendo...');
+    }
+
+    // Limpiar base de datos destino
+    console.log('\n🧹 Limpiando base de datos destino...');
+    try { await targetPrisma.statusHistory.deleteMany(); } catch (e) { console.log('⚠️  Tabla statusHistory no existe o está vacía'); }
+    try { await targetPrisma.remitoItem.deleteMany(); } catch (e) { console.log('⚠️  Tabla remitoItem no existe o está vacía'); }
+    try { await targetPrisma.remito.deleteMany(); } catch (e) { console.log('⚠️  Tabla remito no existe o está vacía'); }
+    try { await targetPrisma.product.deleteMany(); } catch (e) { console.log('⚠️  Tabla product no existe o está vacía'); }
+    try { await targetPrisma.client.deleteMany(); } catch (e) { console.log('⚠️  Tabla client no existe o está vacía'); }
+    try { await targetPrisma.category.deleteMany(); } catch (e) { console.log('⚠️  Tabla category no existe o está vacía'); }
+    try { await targetPrisma.user.deleteMany(); } catch (e) { console.log('⚠️  Tabla user no existe o está vacía'); }
+    try { await targetPrisma.company.deleteMany(); } catch (e) { console.log('⚠️  Tabla company no existe o está vacía'); }
+    console.log('✅ Base de datos destino limpiada');
+
+    // Migrar empresas
+    console.log('\n🏢 Migrando empresas...');
+    const companies = await sourcePrisma.company.findMany();
+    for (const company of companies) {
+      await targetPrisma.company.create({
+        data: {
+          id: company.id,
+          name: company.name,
+          createdAt: company.createdAt,
+          updatedAt: company.updatedAt
+        }
+      });
+    }
+    console.log(`✅ ${companies.length} empresas migradas`);
+
+    // Migrar usuarios
+    console.log('\n👥 Migrando usuarios...');
+    const users = await sourcePrisma.user.findMany();
+    for (const user of users) {
+      await targetPrisma.user.create({
+        data: {
+          id: user.id,
+          email: user.email,
+          password: user.password,
+          name: user.name,
+          role: user.role,
+          address: user.address,
+          phone: user.phone,
+          companyId: user.companyId,
+          impersonatingUserId: user.impersonatingUserId,
+          createdAt: user.createdAt,
+          updatedAt: user.updatedAt
+        }
+      });
+    }
+    console.log(`✅ ${users.length} usuarios migrados`);
+
+    // Migrar categorías
+    console.log('\n📂 Migrando categorías...');
+    const categories = await sourcePrisma.category.findMany();
+    for (const category of categories) {
+      await targetPrisma.category.create({
+        data: {
+          id: category.id,
+          name: category.name,
+          companyId: category.companyId,
+          createdAt: category.createdAt,
+          updatedAt: category.updatedAt
+        }
+      });
+    }
+    console.log(`✅ ${categories.length} categorías migradas`);
+
+    // Migrar productos
+    console.log('\n📦 Migrando productos...');
+    const products = await sourcePrisma.product.findMany();
+    for (const product of products) {
+      await targetPrisma.product.create({
+        data: {
+          id: product.id,
+          name: product.name,
+          description: product.description,
+          price: product.price,
+          stock: product.stock,
+          companyId: product.companyId,
+          categoryId: product.categoryId,
+          createdAt: product.createdAt,
+          updatedAt: product.updatedAt
+        }
+      });
+    }
+    console.log(`✅ ${products.length} productos migrados`);
+
+    // Migrar clientes
+    console.log('\n👤 Migrando clientes...');
+    const clients = await sourcePrisma.client.findMany();
+    for (const client of clients) {
+      await targetPrisma.client.create({
+        data: {
+          id: client.id,
+          name: client.name,
+          address: client.address,
+          phone: client.phone,
+          email: client.email,
+          companyId: client.companyId,
+          createdAt: client.createdAt,
+          updatedAt: client.updatedAt
+        }
+      });
+    }
+    console.log(`✅ ${clients.length} clientes migrados`);
+
+    // Migrar remitos
+    console.log('\n📄 Migrando remitos...');
+    const remitos = await sourcePrisma.remito.findMany();
+    for (const remito of remitos) {
+      await targetPrisma.remito.create({
+        data: {
+          id: remito.id,
+          number: remito.number,
+          status: remito.status,
+          clientId: remito.clientId,
+          companyId: remito.companyId,
+          createdById: remito.createdById,
+          createdAt: remito.createdAt,
+          updatedAt: remito.updatedAt
+        }
+      });
+    }
+    console.log(`✅ ${remitos.length} remitos migrados`);
+
+    // Migrar items de remitos
+    console.log('\n📋 Migrando items de remitos...');
+    const remitoItems = await sourcePrisma.remitoItem.findMany();
+    for (const item of remitoItems) {
+      // Obtener el nombre del producto
+      const product = await sourcePrisma.product.findUnique({
+        where: { id: item.productId },
+        select: { name: true }
+      });
+      
+      await targetPrisma.remitoItem.create({
+        data: {
+          id: item.id,
+          quantity: item.quantity,
+          unitPrice: item.unitPrice,
+          lineTotal: item.lineTotal,
+          remitoId: item.remitoId,
+          productId: item.productId,
+          productName: product?.name || 'Producto no encontrado',
+          createdAt: item.createdAt,
+          updatedAt: item.updatedAt
+        }
+      });
+    }
+    console.log(`✅ ${remitoItems.length} items de remitos migrados`);
+
+    // Migrar historial de remitos
+    console.log('\n📝 Migrando historial de remitos...');
+    let remitoHistory = [];
+    try {
+      remitoHistory = await sourcePrisma.statusHistory.findMany();
+      for (const history of remitoHistory) {
+        await targetPrisma.statusHistory.create({
+          data: {
+            id: history.id,
+            status: history.status,
+            at: history.at,
+            remitoId: history.remitoId,
+            byUserId: history.byUserId
+          }
+        });
+      }
+      console.log(`✅ ${remitoHistory.length} historial de remitos migrado`);
+    } catch (error) {
+      console.log('⚠️  No se pudo migrar el historial de remitos (tabla no existe o está vacía)');
+    }
+
+    // Verificar migración
+    console.log('\n🔍 Verificando migración...');
+    const finalStats = await getDatabaseStats(targetPrisma);
+    displayStats(finalStats, 'Base de datos DESTINO (después de migración)');
+
+    console.log('\n🎉 ¡Migración completada exitosamente!');
+    console.log(`📊 Resumen:`);
+    console.log(`  • Empresas: ${companies.length} migradas`);
+    console.log(`  • Usuarios: ${users.length} migrados`);
+    console.log(`  • Categorías: ${categories.length} migradas`);
+    console.log(`  • Productos: ${products.length} migrados`);
+    console.log(`  • Clientes: ${clients.length} migrados`);
+    console.log(`  • Remitos: ${remitos.length} migrados`);
+    console.log(`  • Items: ${remitoItems.length} migrados`);
+    console.log(`  • Historial: ${remitoHistory ? remitoHistory.length : 0} migrado`);
+
+  } catch (error) {
+    console.error('\n❌ Error durante la migración:', error.message);
+    throw error;
+  } finally {
+    await sourcePrisma.$disconnect();
+    await targetPrisma.$disconnect();
+  }
+}
+
+// Función principal
+async function main() {
+  const args = process.argv.slice(2);
+  
+  if (args.length === 0 || args.includes('--help')) {
+    console.log(`
+🔄 Script de Migración de Base de Datos
+
+USO:
+  node scripts/migrate-database.js <dirección> [opciones]
+
+DIRECCIONES:
+  dev-to-prod    Migrar de desarrollo a producción
+  prod-to-dev    Migrar de producción a desarrollo
+
+OPCIONES:
+  --force        Omitir confirmación (útil para scripts automatizados)
+  --help         Mostrar esta ayuda
+
+EJEMPLOS:
+  node scripts/migrate-database.js dev-to-prod
+  node scripts/migrate-database.js prod-to-dev --force
+
+⚠️  ADVERTENCIA: 
+  Esta operación SOBRESCRIBE completamente la base de datos destino.
+  Asegúrate de hacer un backup antes de proceder.
+    `);
+    return;
+  }
+
+  const direction = args[0];
+  const isForce = args.includes('--force');
+
+  try {
+    if (direction === 'dev-to-prod') {
+      await migrateData(DATABASE_URLS.dev, DATABASE_URLS.prod, 'DESARROLLO → PRODUCCIÓN');
+    } else if (direction === 'prod-to-dev') {
+      await migrateData(DATABASE_URLS.prod, DATABASE_URLS.dev, 'PRODUCCIÓN → DESARROLLO');
+    } else {
+      console.error('❌ Dirección inválida. Usa: dev-to-prod o prod-to-dev');
+      console.log('💡 Usa --help para ver la ayuda completa');
+      process.exit(1);
+    }
+  } catch (error) {
+    console.error('\n💥 Migración fallida:', error.message);
+    process.exit(1);
+  }
+}
+
+// Ejecutar si es llamado directamente
+if (require.main === module) {
+  main();
+}
+
+module.exports = { migrateData, getDatabaseStats, DATABASE_URLS };
diff --git a/scripts/migrate-dev-to-prod.js b/scripts/migrate-dev-to-prod.js
deleted file mode 100755
index 8c3302c..0000000
--- a/scripts/migrate-dev-to-prod.js
+++ /dev/null
@@ -1,148 +0,0 @@
-#!/usr/bin/env node
-
-const { PrismaClient } = require('@prisma/client');
-
-// Configurar clientes para cada base de datos
-const devPrisma = new PrismaClient({
-  datasources: {
-    db: {
-      url: process.env.dev_DATABASE_URL || process.env.dev_PRISMA_DATABASE_URL
-    }
-  }
-});
-
-const prodPrisma = new PrismaClient({
-  datasources: {
-    db: {
-      url: process.env.POSTGRES_URL || process.env.PRISMA_DATABASE_URL
-    }
-  }
-});
-
-async function migrateData() {
-  try {
-    console.log('🚀 Iniciando migración de datos de desarrollo a producción...');
-    
-    // 1. Verificar conexión a ambas bases de datos
-    console.log('🔍 Verificando conexiones...');
-    await devPrisma.$connect();
-    console.log('✅ Conexión a desarrollo: OK');
-    
-    await prodPrisma.$connect();
-    console.log('✅ Conexión a producción: OK');
-    
-    // 2. Aplicar schema a producción
-    console.log('📋 Aplicando schema a producción...');
-    // Esto se hace con prisma db push
-    
-    // 3. Migrar datos en orden de dependencias
-    console.log('📦 Migrando datos...');
-    
-    // 3.1 Migrar Companies
-    console.log('🏢 Migrando companies...');
-    const companies = await devPrisma.company.findMany();
-    for (const company of companies) {
-      await prodPrisma.company.upsert({
-        where: { id: company.id },
-        update: company,
-        create: company
-      });
-    }
-    console.log(`✅ ${companies.length} companies migradas`);
-    
-    // 3.2 Migrar Users
-    console.log('👥 Migrando users...');
-    const users = await devPrisma.user.findMany();
-    for (const user of users) {
-      await prodPrisma.user.upsert({
-        where: { id: user.id },
-        update: user,
-        create: user
-      });
-    }
-    console.log(`✅ ${users.length} users migrados`);
-    
-    // 3.3 Migrar Categories
-    console.log('📂 Migrando categories...');
-    const categories = await devPrisma.category.findMany();
-    for (const category of categories) {
-      await prodPrisma.category.upsert({
-        where: { id: category.id },
-        update: category,
-        create: category
-      });
-    }
-    console.log(`✅ ${categories.length} categories migradas`);
-    
-    // 3.4 Migrar Products
-    console.log('📦 Migrando products...');
-    const products = await devPrisma.product.findMany();
-    for (const product of products) {
-      await prodPrisma.product.upsert({
-        where: { id: product.id },
-        update: product,
-        create: product
-      });
-    }
-    console.log(`✅ ${products.length} products migrados`);
-    
-    // 3.5 Migrar Clients
-    console.log('👤 Migrando clients...');
-    const clients = await devPrisma.client.findMany();
-    for (const client of clients) {
-      await prodPrisma.client.upsert({
-        where: { id: client.id },
-        update: client,
-        create: client
-      });
-    }
-    console.log(`✅ ${clients.length} clients migrados`);
-    
-    // 3.6 Migrar Remitos
-    console.log('📄 Migrando remitos...');
-    const remitos = await devPrisma.remito.findMany({
-      include: {
-        items: true
-      }
-    });
-    for (const remito of remitos) {
-      // Crear remito sin items primero
-      const { items, ...remitoData } = remito;
-      await prodPrisma.remito.upsert({
-        where: { id: remito.id },
-        update: remitoData,
-        create: remitoData
-      });
-      
-      // Luego crear items
-      for (const item of items) {
-        await prodPrisma.remitoItem.upsert({
-          where: { id: item.id },
-          update: item,
-          create: item
-        });
-      }
-    }
-    console.log(`✅ ${remitos.length} remitos migrados`);
-    
-    console.log('🎉 ¡Migración completada exitosamente!');
-    
-  } catch (error) {
-    console.error('❌ Error durante la migración:', error);
-    throw error;
-  } finally {
-    await devPrisma.$disconnect();
-    await prodPrisma.$disconnect();
-  }
-}
-
-// Ejecutar migración
-migrateData()
-  .then(() => {
-    console.log('✅ Script completado');
-    process.exit(0);
-  })
-  .catch((error) => {
-    console.error('❌ Script falló:', error);
-    process.exit(1);
-  });
diff --git a/scripts/migrate-vercel.js b/scripts/migrate-vercel.js
deleted file mode 100644
index cb98c9e..0000000
--- a/scripts/migrate-vercel.js
+++ /dev/null
@@ -1,60 +0,0 @@
-const { PrismaClient } = require('@prisma/client');
-
-const prisma = new PrismaClient();
-
-async function migrateVercelDatabase() {
-  try {
-    console.log('🚀 Iniciando migración de base de datos en Vercel...');
-    
-    // Verificar si el campo stock existe
-    const result = await prisma.$queryRaw`
-      SELECT column_name, data_type 
-      FROM information_schema.columns 
-      WHERE table_name = 'Product' AND column_name = 'stock';
-    `;
-    
-    if (result.length === 0) {
-      console.log('📝 Campo stock no existe, creándolo...');
-      
-      // Crear el enum StockStatus si no existe
-      await prisma.$executeRaw`
-        DO $$ BEGIN
-          CREATE TYPE "StockStatus" AS ENUM ('IN_STOCK', 'OUT_OF_STOCK');
-        EXCEPTION
-          WHEN duplicate_object THEN null;
-        END $$;
-      `;
-      
-      // Agregar la columna stock
-      await prisma.$executeRaw`
-        ALTER TABLE "Product" 
-        ADD COLUMN IF NOT EXISTS "stock" "StockStatus" NOT NULL DEFAULT 'OUT_OF_STOCK';
-      `;
-      
-      console.log('✅ Campo stock creado exitosamente');
-    } else {
-      console.log('✅ Campo stock ya existe');
-    }
-    
-    // Verificar la estructura final
-    const finalResult = await prisma.$queryRaw`
-      SELECT column_name, data_type, is_nullable 
-      FROM information_schema.columns 
-      WHERE table_name = 'Product' 
-      ORDER BY ordinal_position;
-    `;
-    
-    console.log('\n📋 Estructura final de la tabla Product:');
-    console.table(finalResult);
-    
-    console.log('\n🎉 Migración completada exitosamente');
-    
-  } catch (error) {
-    console.error('❌ Error durante la migración:', error);
-    throw error;
-  } finally {
-    await prisma.$disconnect();
-  }
-}
-
-migrateVercelDatabase();
diff --git a/scripts/migrate.sh b/scripts/migrate.sh
new file mode 100755
index 0000000..d461967
--- /dev/null
+++ b/scripts/migrate.sh
@@ -0,0 +1,40 @@
+#!/bin/bash
+
+echo "🔄 Script de Migración de Base de Datos"
+echo "======================================"
+
+# Verificar que se proporcione la dirección
+if [ $# -eq 0 ]; then
+    echo "❌ Error: Debes especificar la dirección de migración"
+    echo ""
+    echo "USO:"
+    echo "  ./scripts/migrate.sh dev-to-prod    # Migrar de desarrollo a producción"
+    echo "  ./scripts/migrate.sh prod-to-dev    # Migrar de producción a desarrollo"
+    echo "  ./scripts/migrate.sh --help         # Mostrar ayuda completa"
+    echo ""
+    exit 1
+fi
+
+# Mostrar ayuda
+if [ "$1" = "--help" ]; then
+    node scripts/migrate-database.js --help
+    exit 0
+fi
+
+# Verificar que Node.js esté disponible
+if ! command -v node &> /dev/null; then
+    echo "❌ Error: Node.js no está instalado o no está en el PATH"
+    exit 1
+fi
+
+# Verificar que las dependencias estén instaladas
+if [ ! -d "node_modules" ]; then
+    echo "📦 Instalando dependencias..."
+    npm install
+fi
+
+# Ejecutar migración
+echo "🚀 Ejecutando migración: $1"
+echo ""
+
+node scripts/migrate-database.js "$@"
diff --git a/scripts/prod-db.js b/scripts/prod-db.js
deleted file mode 100755
index 8100cd8..0000000
--- a/scripts/prod-db.js
+++ /dev/null
@@ -1,174 +0,0 @@
-#!/usr/bin/env node
-
-const { PrismaClient } = require('@prisma/client');
-const bcrypt = require('bcryptjs');
-
-// Script para ejecutar queries en la base de datos de producción
-const prisma = new PrismaClient({
-  datasources: {
-    db: {
-      url: process.env.PRISMA_DATABASE_URL || process.env.POSTGRES_URL
-    }
-  }
-});
-
-async function main() {
-  const command = process.argv[2];
-  
-  if (!command) {
-    console.log('🚀 Script de base de datos de producción');
-    console.log('Uso: node scripts/prod-db.js <comando>');
-    console.log('');
-    console.log('Comandos disponibles:');
-    console.log('  populate    - Poblar datos básicos');
-    console.log('  clear       - Limpiar todos los datos');
-    console.log('  status      - Ver estado de las tablas');
-    console.log('  query       - Ejecutar query personalizada');
-    return;
-  }
-
-  try {
-    switch (command) {
-      case 'populate':
-        await populateData();
-        break;
-      case 'clear':
-        await clearData();
-        break;
-      case 'status':
-        await showStatus();
-        break;
-      case 'query':
-        await executeQuery();
-        break;
-      default:
-        console.log('❌ Comando no reconocido:', command);
-    }
-  } catch (error) {
-    console.error('❌ Error:', error.message);
-  } finally {
-    await prisma.$disconnect();
-  }
-}
-
-async function populateData() {
-  console.log('🚀 Poblando datos de producción...');
-  
-  // Crear company
-  const company = await prisma.company.upsert({
-    where: { name: "Distribuidora Ruben" },
-    update: {},
-    create: { name: "Distribuidora Ruben" }
-  });
-  console.log('✅ Company:', company.name);
-  
-  // Crear usuarios
-  const hashedPassword = await bcrypt.hash("daedae123", 10);
-  const user = await prisma.user.upsert({
-    where: { email: "admin@remitero.com" },
-    update: {},
-    create: {
-      name: "Super Admin",
-      email: "admin@remitero.com",
-      password: hashedPassword,
-      role: "SUPERADMIN",
-      companyId: company.id
-    }
-  });
-  console.log('✅ User:', user.name);
-  
-  // Crear categorías
-  const categoria1 = await prisma.category.upsert({
-    where: { companyId_name: { name: "Productos de Limpieza", companyId: company.id } },
-    update: {},
-    create: { name: "Productos de Limpieza", companyId: company.id }
-  });
-  
-  const categoria2 = await prisma.category.upsert({
-    where: { companyId_name: { name: "Alimentos", companyId: company.id } },
-    update: {},
-    create: { name: "Alimentos", companyId: company.id }
-  });
-  console.log('✅ Categorías creadas');
-  
-  // Crear productos
-  const productos = [
-    { name: "Detergente Líquido", description: "Detergente líquido para ropa", unitPrice: 450.00, stock: "IN_STOCK", categoryId: categoria1.id, companyId: company.id },
-    { name: "Arroz Blanco", description: "Arroz blanco premium", unitPrice: 320.00, stock: "IN_STOCK", categoryId: categoria2.id, companyId: company.id }
-  ];
-  
-  for (const productoData of productos) {
-    await prisma.product.upsert({
-      where: { companyId_name: { name: productoData.name, companyId: company.id } },
-      update: {},
-      create: productoData
-    });
-  }
-  console.log('✅ Productos creados');
-  
-  // Crear clientes
-  const clientes = [
-    { name: "Cliente Demo 1", address: "Av. Principal 123", phone: "+54 11 1234-5678", email: "cliente1@demo.com", companyId: company.id },
-    { name: "Cliente Demo 2", address: "Calle Secundaria 456", phone: "+54 11 8765-4321", email: "cliente2@demo.com", companyId: company.id }
-  ];
-  
-  for (const clienteData of clientes) {
-    await prisma.client.upsert({
-      where: { companyId_name: { name: clienteData.name, companyId: company.id } },
-      update: {},
-      create: clienteData
-    });
-  }
-  console.log('✅ Clientes creados');
-  
-  console.log('🎉 Datos poblados exitosamente');
-}
-
-async function clearData() {
-  console.log('🗑️ Limpiando datos de producción...');
-  
-  await prisma.remitoItem.deleteMany();
-  await prisma.statusHistory.deleteMany();
-  await prisma.remito.deleteMany();
-  await prisma.product.deleteMany();
-  await prisma.client.deleteMany();
-  await prisma.category.deleteMany();
-  await prisma.user.deleteMany();
-  await prisma.company.deleteMany();
-  
-  console.log('✅ Datos limpiados');
-}
-
-async function showStatus() {
-  console.log('📊 Estado de las tablas:');
-  
-  const counts = await Promise.all([
-    prisma.company.count(),
-    prisma.user.count(),
-    prisma.category.count(),
-    prisma.product.count(),
-    prisma.client.count(),
-    prisma.remito.count()
-  ]);
-  
-  console.log(`  Companies: ${counts[0]}`);
-  console.log(`  Users: ${counts[1]}`);
-  console.log(`  Categories: ${counts[2]}`);
-  console.log(`  Products: ${counts[3]}`);
-  console.log(`  Clients: ${counts[4]}`);
-  console.log(`  Remitos: ${counts[5]}`);
-}
-
-async function executeQuery() {
-  const query = process.argv[3];
-  if (!query) {
-    console.log('❌ Debe proporcionar una query');
-    return;
-  }
-  
-  console.log('🔍 Ejecutando query:', query);
-  const result = await prisma.$queryRawUnsafe(query);
-  console.log('✅ Resultado:', JSON.stringify(result, null, 2));
-}
-
-main();
diff --git a/scripts/setup-environments.sh b/scripts/setup-environments.sh
deleted file mode 100755
index 7ff59be..0000000
--- a/scripts/setup-environments.sh
+++ /dev/null
@@ -1,25 +0,0 @@
-#!/bin/bash
-
-echo "🔧 Configurando entornos separados en Vercel..."
-
-# Configurar variables para Producción
-echo "📦 Configurando variables de Producción..."
-vercel env add DATABASE_URL production
-vercel env add NEXTAUTH_URL production
-vercel env add NEXTAUTH_SECRET production
-
-# Configurar variables para Preview
-echo "🚧 Configurando variables de Preview..."
-vercel env add DATABASE_URL preview
-vercel env add NEXTAUTH_URL preview
-vercel env add NEXTAUTH_SECRET preview
-
-echo "✅ Variables de entorno configuradas!"
-echo ""
-echo "📋 Próximos pasos:"
-echo "1. Configurar DATABASE_URL de producción en Vercel Dashboard"
-echo "2. Configurar DATABASE_URL de desarrollo en Vercel Dashboard"
-echo "3. Configurar NEXTAUTH_URL para cada entorno"
-echo "4. Configurar NEXTAUTH_SECRET para cada entorno"
-echo ""
-echo "🔗 Vercel Dashboard: https://vercel.com/daeiman0/v0-remitero/settings/environment-variables"
diff --git a/src/app/api/categories/route.ts b/src/app/api/categories/route.ts
index cd204ec..25d36e4 100644
--- a/src/app/api/categories/route.ts
+++ b/src/app/api/categories/route.ts
@@ -1,7 +1,7 @@
 import { NextRequest, NextResponse } from "next/server";
 import { getServerSession } from "next-auth";
 import { authOptions } from "@/lib/auth";
-import { prisma } from "@/lib/db";
+import { withPrisma } from "@/lib/prisma";
 import { z } from "zod";
 
 const categorySchema = z.object({
@@ -16,14 +16,16 @@ export async function GET(request: NextRequest) {
       return NextResponse.json({ error: "No autorizado" }, { status: 401 });
     }
 
-    const categories = await prisma.category.findMany({
-      where: { companyId: session.user.companyId },
-      include: {
-        _count: {
-          select: { products: true }
-        }
-      },
-      orderBy: { name: "asc" }
+    const categories = await withPrisma(async (prisma) => {
+      return await prisma.category.findMany({
+        where: { companyId: session.user.companyId },
+        include: {
+          _count: {
+            select: { products: true }
+          }
+        },
+        orderBy: { name: "asc" }
+      });
     });
 
     return NextResponse.json(categories);
@@ -44,11 +46,13 @@ export async function POST(request: NextRequest) {
     const body = await request.json();
     const validatedData = categorySchema.parse(body);
 
-    const category = await prisma.category.create({
-      data: {
-        ...validatedData,
-        companyId: session.user.companyId
-      }
+    const category = await withPrisma(async (prisma) => {
+      return await prisma.category.create({
+        data: {
+          ...validatedData,
+          companyId: session.user.companyId
+        }
+      });
     });
 
     return NextResponse.json(category, { status: 201 });
diff --git a/src/app/api/check-db/route.ts b/src/app/api/check-db/route.ts
new file mode 100644
index 0000000..f25b5cf
--- /dev/null
+++ b/src/app/api/check-db/route.ts
@@ -0,0 +1,38 @@
+import { NextResponse } from 'next/server';
+import { prisma } from '@/lib/db';
+
+export async function GET() {
+  try {
+    // Verificar conexión
+    const userCount = await prisma.user.count();
+    
+    // Buscar usuarios específicos
+    const users = await prisma.user.findMany({
+      where: {
+        email: {
+          in: ['admin@remitero.com', 'admin@empresademo.com']
+        }
+      },
+      select: {
+        email: true,
+        role: true,
+        name: true
+      }
+    });
+    
+    return NextResponse.json({
+      success: true,
+      environment: process.env.VERCEL_ENV || 'local',
+      userCount,
+      users,
+      databaseUrl: process.env.DATABASE_URL ? 'configured' : 'not configured'
+    });
+    
+  } catch (error) {
+    return NextResponse.json({
+      success: false,
+      error: error instanceof Error ? error.message : 'Unknown error',
+      environment: process.env.VERCEL_ENV || 'local'
+    }, { status: 500 });
+  }
+}
diff --git a/src/app/api/clients/route.ts b/src/app/api/clients/route.ts
index 115a1cf..91f52b2 100644
--- a/src/app/api/clients/route.ts
+++ b/src/app/api/clients/route.ts
@@ -1,7 +1,7 @@
 import { NextRequest, NextResponse } from "next/server";
 import { getServerSession } from "next-auth";
 import { authOptions } from "@/lib/auth";
-import { prisma } from "@/lib/db";
+import { withPrisma } from "@/lib/prisma";
 import { z } from "zod";
 
 const clientSchema = z.object({
@@ -19,14 +19,16 @@ export async function GET(request: NextRequest) {
       return NextResponse.json({ error: "No autorizado" }, { status: 401 });
     }
 
-    const clients = await prisma.client.findMany({
-      where: { companyId: session.user.companyId },
-      include: {
-        remitos: {
-          select: { id: true }
-        }
-      },
-      orderBy: { name: "asc" }
+    const clients = await withPrisma(async (prisma) => {
+      return await prisma.client.findMany({
+        where: { companyId: session.user.companyId },
+        include: {
+          remitos: {
+            select: { id: true }
+          }
+        },
+        orderBy: { name: "asc" }
+      });
     });
 
     return NextResponse.json(clients);
@@ -47,11 +49,13 @@ export async function POST(request: NextRequest) {
     const body = await request.json();
     const validatedData = clientSchema.parse(body);
 
-    const client = await prisma.client.create({
-      data: {
-        ...validatedData,
-        companyId: session.user.companyId
-      }
+    const client = await withPrisma(async (prisma) => {
+      return await prisma.client.create({
+        data: {
+          ...validatedData,
+          companyId: session.user.companyId
+        }
+      });
     });
 
     return NextResponse.json(client, { status: 201 });
diff --git a/src/app/api/debug-auth/route.ts b/src/app/api/debug-auth/route.ts
new file mode 100644
index 0000000..9c34c4f
--- /dev/null
+++ b/src/app/api/debug-auth/route.ts
@@ -0,0 +1,71 @@
+import { NextRequest, NextResponse } from 'next/server';
+import { prisma } from '@/lib/db';
+import bcrypt from 'bcryptjs';
+
+export async function GET(request: NextRequest) {
+  try {
+    console.log('🔍 Debug Auth endpoint called');
+    
+    // Verificar conexión a base de datos
+    const userCount = await prisma.user.count();
+    console.log(`📊 Total users in database: ${userCount}`);
+    
+    // Buscar usuarios específicos
+    const targetUsers = ['admin@remitero.com', 'admin@empresademo.com'];
+    const users = await prisma.user.findMany({
+      where: {
+        email: {
+          in: targetUsers
+        }
+      },
+      select: {
+        email: true,
+        role: true,
+        name: true,
+        password: true
+      }
+    });
+    
+    console.log(`👥 Found ${users.length} target users`);
+    
+    // Probar contraseña
+    const testEmail = 'admin@remitero.com';
+    const testPassword = 'daedae123';
+    
+    const user = await prisma.user.findUnique({
+      where: { email: testEmail }
+    });
+    
+    let passwordValid = false;
+    if (user) {
+      passwordValid = await bcrypt.compare(testPassword, user.password);
+    }
+    
+    return NextResponse.json({
+      success: true,
+      environment: process.env.VERCEL_ENV || 'local',
+      databaseUrl: process.env.DATABASE_URL ? 'configured' : 'not configured',
+      userCount,
+      targetUsers: users.map(u => ({
+        email: u.email,
+        role: u.role,
+        name: u.name,
+        hasPassword: !!u.password
+      })),
+      testAuth: {
+        email: testEmail,
+        userFound: !!user,
+        passwordValid
+      }
+    });
+    
+  } catch (error) {
+    console.error('❌ Debug Auth error:', error);
+    return NextResponse.json({
+      success: false,
+      error: error instanceof Error ? error.message : 'Unknown error',
+      environment: process.env.VERCEL_ENV || 'local',
+      databaseUrl: process.env.DATABASE_URL ? 'configured' : 'not configured'
+    }, { status: 500 });
+  }
+}
diff --git a/src/app/api/products/route.ts b/src/app/api/products/route.ts
index cb3b59f..fae35f4 100644
--- a/src/app/api/products/route.ts
+++ b/src/app/api/products/route.ts
@@ -1,7 +1,7 @@
 import { NextRequest, NextResponse } from "next/server";
 import { getServerSession } from "next-auth";
 import { authOptions } from "@/lib/auth";
-import { prisma } from "@/lib/db";
+import { withPrisma } from "@/lib/prisma";
 import { z } from "zod";
 
 const productSchema = z.object({
@@ -30,10 +30,12 @@ export async function GET(request: NextRequest) {
       whereClause.stock = 'IN_STOCK';
     }
 
-    const products = await prisma.product.findMany({
-      where: whereClause,
-      include: { category: true },
-      orderBy: { name: "asc" }
+    const products = await withPrisma(async (prisma) => {
+      return await prisma.product.findMany({
+        where: whereClause,
+        include: { category: true },
+        orderBy: { name: "asc" }
+      });
     });
 
     return NextResponse.json(products);
@@ -54,12 +56,14 @@ export async function POST(request: NextRequest) {
     const body = await request.json();
     const validatedData = productSchema.parse(body);
 
-    const product = await prisma.product.create({
-      data: {
-        ...validatedData,
-        companyId: session.user.companyId
-      },
-      include: { category: true }
+    const product = await withPrisma(async (prisma) => {
+      return await prisma.product.create({
+        data: {
+          ...validatedData,
+          companyId: session.user.companyId
+        },
+        include: { category: true }
+      });
     });
 
     return NextResponse.json(product, { status: 201 });
diff --git a/src/app/api/remitos/route.ts b/src/app/api/remitos/route.ts
index ae7b62b..7fc6b9c 100644
--- a/src/app/api/remitos/route.ts
+++ b/src/app/api/remitos/route.ts
@@ -1,7 +1,7 @@
 import { NextRequest, NextResponse } from "next/server";
 import { getServerSession } from "next-auth";
 import { authOptions } from "@/lib/auth";
-import { prisma } from "@/lib/db";
+import { withPrisma } from "@/lib/prisma";
 import { remitoSchema } from "@/lib/validations";
 
 export async function GET(request: NextRequest) {
@@ -12,19 +12,21 @@ export async function GET(request: NextRequest) {
       return NextResponse.json({ error: "No autorizado" }, { status: 401 });
     }
 
-    const remitos = await prisma.remito.findMany({
-      where: { companyId: session.user.companyId },
-      include: {
-        client: { select: { id: true, name: true } },
-        items: true,
-        createdBy: { select: { name: true } },
-        history: {
-          orderBy: { at: "desc" },
-          take: 1,
-          include: { byUser: { select: { name: true } } }
-        }
-      },
-      orderBy: { number: "desc" }
+    const remitos = await withPrisma(async (prisma) => {
+      return await prisma.remito.findMany({
+        where: { companyId: session.user.companyId },
+        include: {
+          client: { select: { id: true, name: true } },
+          items: true,
+          createdBy: { select: { name: true } },
+          history: {
+            orderBy: { at: "desc" },
+            take: 1,
+            include: { byUser: { select: { name: true } } }
+          }
+        },
+        orderBy: { number: "desc" }
+      });
     });
 
     // Map history to get the latest statusAt and calculate total
diff --git a/src/app/api/test-db/route.ts b/src/app/api/test-db/route.ts
index 29834ad..8f36d9b 100644
--- a/src/app/api/test-db/route.ts
+++ b/src/app/api/test-db/route.ts
@@ -1,46 +1,42 @@
-import { NextRequest, NextResponse } from "next/server";
-import { PrismaClient } from "@prisma/client";
+import { NextResponse } from 'next/server';
+import { prisma } from '@/lib/db';
 
-export async function GET(request: NextRequest) {
+export async function GET() {
   try {
-    console.log('🔍 Probando conexión a base de datos...');
+    console.log('🔍 Test DB endpoint called');
     
-    // Crear instancia directa de Prisma
-    const prisma = new PrismaClient({
-      datasources: {
-        db: {
-          url: process.env.DATABASE_URL || process.env.PRISMA_DATABASE_URL || process.env.POSTGRES_URL
+    // Verificar conexión
+    const userCount = await prisma.user.count();
+    console.log(`📊 Total users: ${userCount}`);
+    
+    // Buscar usuarios específicos
+    const users = await prisma.user.findMany({
+      where: {
+        email: {
+          in: ['admin@remitero.com', 'admin@empresademo.com']
         }
+      },
+      select: {
+        email: true,
+        role: true,
+        name: true
       }
     });
     
-    // Probar conexión
-    await prisma.$connect();
-    console.log('✅ Conexión establecida');
-    
-    // Probar query simple
-    const result = await prisma.$queryRaw`SELECT 1 as test`;
-    console.log('✅ Query ejecutada:', result);
-    
-    await prisma.$disconnect();
-    
-    return NextResponse.json({ 
-      success: true, 
-      message: "Conexión a base de datos exitosa",
-      data: result
+    return NextResponse.json({
+      success: true,
+      environment: process.env.VERCEL_ENV || 'local',
+      userCount,
+      users,
+      databaseUrl: process.env.DATABASE_URL ? 'configured' : 'not configured'
     });
     
   } catch (error) {
-    console.error('❌ Error en test-db:', error);
-    return NextResponse.json({ 
-      success: false, 
-      error: error instanceof Error ? error.message : 'Error desconocido',
-      env: {
-        DATABASE_URL: process.env.DATABASE_URL ? '✅ Configurada' : '❌ No encontrada',
-        PRISMA_DATABASE_URL: process.env.PRISMA_DATABASE_URL ? '✅ Configurada' : '❌ No encontrada',
-        POSTGRES_URL: process.env.POSTGRES_URL ? '✅ Configurada' : '❌ No encontrada',
-        VERCEL_ENV: process.env.VERCEL_ENV || 'No configurado'
-      }
+    console.error('❌ Test DB error:', error);
+    return NextResponse.json({
+      success: false,
+      error: error instanceof Error ? error.message : 'Unknown error',
+      environment: process.env.VERCEL_ENV || 'local'
     }, { status: 500 });
   }
-}
+}
\ No newline at end of file
diff --git a/src/app/api/test-prisma/route.ts b/src/app/api/test-prisma/route.ts
new file mode 100644
index 0000000..f27ee71
--- /dev/null
+++ b/src/app/api/test-prisma/route.ts
@@ -0,0 +1,56 @@
+import { NextResponse } from 'next/server';
+
+export async function GET() {
+  try {
+    console.log('🔍 Test Prisma endpoint called');
+    
+    // Verificar variables de entorno
+    const databaseUrl = process.env.DATABASE_URL;
+    const vercelEnv = process.env.VERCEL_ENV;
+    
+    console.log('🔧 Environment variables:');
+    console.log('- VERCEL_ENV:', vercelEnv);
+    console.log('- DATABASE_URL configured:', !!databaseUrl);
+    console.log('- DATABASE_URL preview:', databaseUrl?.substring(0, 50) + '...');
+    
+    // Intentar importar Prisma
+    const { PrismaClient } = await import('@prisma/client');
+    console.log('✅ PrismaClient imported successfully');
+    
+    // Crear cliente Prisma
+    const prisma = new PrismaClient({
+      datasources: {
+        db: {
+          url: databaseUrl
+        }
+      }
+    });
+    console.log('✅ PrismaClient created successfully');
+    
+    // Intentar conectar
+    await prisma.$connect();
+    console.log('✅ Database connection successful');
+    
+    // Intentar consulta simple
+    const userCount = await prisma.user.count();
+    console.log('✅ User count query successful:', userCount);
+    
+    await prisma.$disconnect();
+    console.log('✅ Database disconnected successfully');
+    
+    return NextResponse.json({
+      success: true,
+      environment: vercelEnv,
+      databaseUrl: !!databaseUrl,
+      userCount
+    });
+    
+  } catch (error) {
+    console.error('❌ Test Prisma error:', error);
+    return NextResponse.json({
+      success: false,
+      error: error instanceof Error ? error.message : 'Unknown error',
+      stack: error instanceof Error ? error.stack : undefined
+    }, { status: 500 });
+  }
+}
diff --git a/src/app/api/users/route.ts b/src/app/api/users/route.ts
index 349c2ef..3e2f94b 100644
--- a/src/app/api/users/route.ts
+++ b/src/app/api/users/route.ts
@@ -1,7 +1,7 @@
 import { NextRequest, NextResponse } from "next/server";
 import { getServerSession } from "next-auth";
 import { authOptions } from "@/lib/auth";
-import { prisma } from "@/lib/db";
+import { withPrisma } from "@/lib/prisma";
 import { z } from "zod";
 import bcrypt from "bcryptjs";
 
@@ -23,14 +23,16 @@ export async function GET(request: NextRequest) {
       return NextResponse.json({ error: "No autorizado" }, { status: 401 });
     }
 
-    const users = await prisma.user.findMany({
-      where: {
-        companyId: session.user.role === "ADMIN" ? session.user.companyId : undefined,
-      },
-      include: {
-        company: true
-      },
-      orderBy: { name: "asc" }
+    const users = await withPrisma(async (prisma) => {
+      return await prisma.user.findMany({
+        where: {
+          companyId: session.user.role === "ADMIN" ? session.user.companyId : undefined,
+        },
+        include: {
+          company: true
+        },
+        orderBy: { name: "asc" }
+      });
     });
 
     return NextResponse.json(users);
@@ -51,43 +53,45 @@ export async function POST(request: NextRequest) {
     const body = await request.json();
     const validatedData = userSchema.parse(body);
 
-    // Verificar que el email no esté en uso
-    const existingUser = await prisma.user.findUnique({
-      where: { email: validatedData.email }
-    });
-
-    if (existingUser) {
-      return NextResponse.json({ error: "El email ya está en uso" }, { status: 400 });
-    }
+    const user = await withPrisma(async (prisma) => {
+      // Verificar que el email no esté en uso
+      const existingUser = await prisma.user.findUnique({
+        where: { email: validatedData.email }
+      });
 
-    // Hash de la contraseña si se proporciona
-    let hashedPassword = "";
-    if (validatedData.password) {
-      hashedPassword = await bcrypt.hash(validatedData.password, 12);
-    }
+      if (existingUser) {
+        throw new Error("El email ya está en uso");
+      }
 
-    // Determinar la empresa del usuario
-    const companyId = session.user.role === "SUPERADMIN" 
-      ? validatedData.companyId 
-      : session.user.companyId;
+      // Hash de la contraseña si se proporciona
+      let hashedPassword = "";
+      if (validatedData.password) {
+        hashedPassword = await bcrypt.hash(validatedData.password, 12);
+      }
 
-    if (!companyId) {
-      return NextResponse.json({ error: "Empresa requerida" }, { status: 400 });
-    }
+      // Determinar la empresa del usuario
+      const companyId = session.user.role === "SUPERADMIN" 
+        ? validatedData.companyId 
+        : session.user.companyId;
 
-    const user = await prisma.user.create({
-      data: {
-        name: validatedData.name,
-        email: validatedData.email,
-        password: hashedPassword,
-        role: validatedData.role,
-        address: validatedData.address,
-        phone: validatedData.phone,
-        companyId: companyId
-      },
-      include: {
-        company: true
+      if (!companyId) {
+        throw new Error("Empresa requerida");
       }
+
+      return await prisma.user.create({
+        data: {
+          name: validatedData.name,
+          email: validatedData.email,
+          password: hashedPassword,
+          role: validatedData.role,
+          address: validatedData.address,
+          phone: validatedData.phone,
+          companyId: companyId
+        },
+        include: {
+          company: true
+        }
+      });
     });
 
     return NextResponse.json(user, { status: 201 });
@@ -98,6 +102,14 @@ export async function POST(request: NextRequest) {
       return NextResponse.json({ error: "Datos inválidos", details: error.errors }, { status: 400 });
     }
 
+    if (error.message === "El email ya está en uso") {
+      return NextResponse.json({ error: error.message }, { status: 400 });
+    }
+
+    if (error.message === "Empresa requerida") {
+      return NextResponse.json({ error: error.message }, { status: 400 });
+    }
+
     return NextResponse.json({ error: "Error interno del servidor" }, { status: 500 });
   }
 }
diff --git a/src/lib/auth.ts b/src/lib/auth.ts
index e7efd6a..da6edd7 100644
--- a/src/lib/auth.ts
+++ b/src/lib/auth.ts
@@ -1,7 +1,27 @@
 import { NextAuthOptions } from "next-auth"
 import CredentialsProvider from "next-auth/providers/credentials"
 import bcrypt from "bcryptjs"
-import { prisma } from "@/lib/db"
+import { PrismaClient } from "@prisma/client"
+
+// Crear una instancia de Prisma específica para NextAuth
+const createPrismaClient = () => {
+  const isPreview = process.env.VERCEL_ENV === 'preview' || process.env.NODE_ENV === 'development'
+  const databaseUrl = isPreview 
+    ? process.env.DATABASE_URL || process.env.dev_PRISMA_DATABASE_URL || process.env.dev_POSTGRES_URL
+    : process.env.DATABASE_URL || process.env.prod_PRISMA_DATABASE_URL || process.env.prod_POSTGRES_URL
+  
+  if (!databaseUrl) {
+    throw new Error('DATABASE_URL is not configured')
+  }
+  
+  return new PrismaClient({
+    datasources: {
+      db: {
+        url: databaseUrl
+      }
+    }
+  })
+}
 
 export const authOptions: NextAuthOptions = {
   providers: [
@@ -13,43 +33,57 @@ export const authOptions: NextAuthOptions = {
       },
       async authorize(credentials) {
         try {
+          console.log("🔍 NextAuth authorize called with:", { email: credentials?.email, hasPassword: !!credentials?.password })
+          
           if (!credentials?.email || !credentials?.password) {
+            console.log("❌ Credenciales faltantes")
             throw new Error("Credenciales requeridas")
           }
 
+          console.log("🔍 Creando cliente Prisma...")
+          const prisma = createPrismaClient()
+          console.log("✅ Cliente Prisma creado")
+
+          console.log("🔍 Buscando usuario en base de datos...")
           const user = await prisma.user.findUnique({
             where: {
               email: credentials.email
-            },
-            include: {
-              company: true
             }
           })
 
           if (!user) {
+            console.log("❌ Usuario no encontrado:", credentials.email)
+            await prisma.$disconnect()
             throw new Error("Usuario no encontrado")
           }
 
+          console.log("✅ Usuario encontrado:", { email: user.email, role: user.role })
+
           const isPasswordValid = await bcrypt.compare(
             credentials.password,
             user.password
           )
 
           if (!isPasswordValid) {
+            console.log("❌ Contraseña incorrecta para:", credentials.email)
+            await prisma.$disconnect()
             throw new Error("Contraseña incorrecta")
           }
 
+          console.log("✅ Autenticación exitosa para:", credentials.email)
+          await prisma.$disconnect()
+
           return {
             id: user.id,
             email: user.email,
             name: user.name,
             role: user.role,
             companyId: user.companyId,
-            companyName: user.company?.name,
+            companyName: null, // Se puede obtener después si es necesario
             impersonatingUserId: user.impersonatingUserId
           }
         } catch (error) {
-          console.error("Auth error:", error)
+          console.error("❌ Auth error:", error)
           return null
         }
       }
diff --git a/src/lib/db.ts b/src/lib/db.ts
index 9fba785..05254bf 100644
--- a/src/lib/db.ts
+++ b/src/lib/db.ts
@@ -9,22 +9,30 @@ const getDatabaseUrl = () => {
   const isPreview = process.env.VERCEL_ENV === 'preview' || process.env.NODE_ENV === 'development'
   
   if (isPreview) {
-    const devUrl = process.env.dev_DATABASE_URL || process.env.dev_PRISMA_DATABASE_URL
-    console.log('🔧 DESARROLLO/PREVIEW - Usando dev_DATABASE_URL:', devUrl ? '✅ Configurada' : '❌ No encontrada')
-    return devUrl || process.env.DATABASE_URL
+    // Para desarrollo/preview, usar DATABASE_URL que ya está configurada correctamente
+    const devUrl = process.env.DATABASE_URL
+    console.log('🔧 DESARROLLO/PREVIEW - Usando DATABASE_URL:', devUrl ? '✅ Configurada' : '❌ No encontrada')
+    return devUrl || process.env.dev_PRISMA_DATABASE_URL || process.env.dev_POSTGRES_URL
   }
   
-  const prodUrl = process.env.PRISMA_DATABASE_URL || process.env.POSTGRES_URL || process.env.DATABASE_URL
-  console.log('🚀 PRODUCCIÓN - Usando PRISMA_DATABASE_URL:', prodUrl ? '✅ Configurada' : '❌ No encontrada')
-  return prodUrl
+  // Para producción, usar DATABASE_URL que ya está configurada correctamente
+  const prodUrl = process.env.DATABASE_URL
+  console.log('🚀 PRODUCCIÓN - Usando DATABASE_URL:', prodUrl ? '✅ Configurada' : '❌ No encontrada')
+  return prodUrl || process.env.prod_PRISMA_DATABASE_URL || process.env.prod_POSTGRES_URL
+}
+
+const databaseUrl = getDatabaseUrl()
+if (!databaseUrl) {
+  throw new Error('DATABASE_URL is not configured')
 }
 
 export const prisma = globalForPrisma.prisma ?? new PrismaClient({
   datasources: {
     db: {
-      url: getDatabaseUrl()
+      url: databaseUrl
     }
-  }
+  },
+  log: ['query', 'info', 'warn', 'error']
 })
 
 if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = prisma
diff --git a/src/lib/prisma.ts b/src/lib/prisma.ts
new file mode 100644
index 0000000..1b39f3d
--- /dev/null
+++ b/src/lib/prisma.ts
@@ -0,0 +1,41 @@
+import { PrismaClient } from "@prisma/client";
+
+/**
+ * Crea una instancia de PrismaClient configurada para el entorno actual
+ * Maneja automáticamente las variables de entorno de desarrollo y producción
+ */
+export const createPrismaClient = (): PrismaClient => {
+  const isPreview = process.env.VERCEL_ENV === 'preview' || process.env.NODE_ENV === 'development';
+  
+  const databaseUrl = isPreview 
+    ? process.env.DATABASE_URL || process.env.dev_PRISMA_DATABASE_URL || process.env.dev_POSTGRES_URL
+    : process.env.DATABASE_URL || process.env.prod_PRISMA_DATABASE_URL || process.env.prod_POSTGRES_URL;
+  
+  if (!databaseUrl) {
+    throw new Error('DATABASE_URL is not configured');
+  }
+  
+  return new PrismaClient({
+    datasources: {
+      db: {
+        url: databaseUrl
+      }
+    },
+    log: process.env.NODE_ENV === 'development' ? ['query', 'info', 'warn', 'error'] : ['error']
+  });
+};
+
+/**
+ * Wrapper para ejecutar operaciones de Prisma con manejo automático de conexiones
+ */
+export const withPrisma = async <T>(
+  operation: (prisma: PrismaClient) => Promise<T>
+): Promise<T> => {
+  const prisma = createPrismaClient();
+  
+  try {
+    return await operation(prisma);
+  } finally {
+    await prisma.$disconnect();
+  }
+};
